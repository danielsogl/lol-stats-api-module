{
    // version: 3.15.0

    "globals": {

    },

    "env": {
        "browser": true,
        "node": true,
        "es6": true
    },

    "plugins": [
        // Enable es6 imports (requires eslint-plugin-import)
        // "import",

        // Enable linting in html files (requires eslint-plugin-html)
        // "html"
    ],

    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "impliedStrict": true
        }
    },

    "settings": {
        "import/core-modules": [
            "electron"
        ]
    },

    "rules": {

        /******************************************************************************************************************/
        /** ERRORS ********************************************************************************************************/
        /******************************************************************************************************************/

        // Disallow await inside of loops
        "no-await-in-loop": "error",

        // Disallow assignment operators in conditional statements
        "no-cond-assign": ["error", "always"],

        // Disallow use of console
        "no-console": "off",

        // Disallow constant expressions in conditions
        "no-constant-condition": "error",

        // Disallow control characters in regular expressions
        "no-control-regex": "error",

        // Disallow use of debugger
        "no-debugger": "error",

        // Disallow duplicate arguments in function definitions
        "no-dupe-args": "error",

        // Disallow duplicate keys in object literals
        "no-dupe-keys": "error",

        // Disallow a duplicate case label
        "no-duplicate-case": "error",

        // Disallow empty character classes in regular expressions
        "no-empty-character-class": "error",

        // Disallow empty block statements
        "no-empty": "error",

        // Disallow reassigning exception in a catch block
        "no-ex-assign": "error",

        // Disallow unnecessary boolean casts
        "no-extra-boolean-cast": "error",

        // Disallow unnecessary parentheses
        "no-extra-parens": ["off", "all", {
          "conditionalAssign": true,
          "nestedBinaryExpressions": false,
          "returnAssign": false
        }],

        // Disallow unnecessary semicolons
        "no-extra-semi": "error",

        // Disallow reassigning function declarations
        "no-func-assign": "error",

        // Disallow variable or function declarations in nested blocks
        "no-inner-declarations": "error",

        // Disallow invalid regular expression strings in the RegExp constructor
        "no-invalid-regexp": "error",

        // Disallow irregular whitespace
        "no-irregular-whitespace": "error",

        // Disallow calling global object as functions
        "no-obj-calls": "error",

        // Disallow use of Object.prototypes builtins directly
        "no-prototype-builtins": "off",

        // Disallow multiple spaces in a regular expression literal
        "no-regex-spaces": "error",

        // Disallow sparse arrays
        "no-sparse-arrays": "error",

        // Disallow template literal placeholder syntax in regular strings
        "no-template-curly-in-string": "error",

        // Disallow confusing multiline expressions
        "no-unexpected-multiline": "error",

        // Disallow unreachable code after a return, throw, continue, or break statement
        "no-unreachable": "error",

        // Disallow control flow statements in finally blocks
        "no-unsafe-finally": "error",

        // Disallow negating the left operand of relational operators
        "no-unsafe-negation": "error",

        // Require calls to isNaN() when checking for NaN
        "use-isnan": "error",

        // Enforce valid JSDoc comments
        "valid-jsdoc": ["error", {
            "requireReturn": false,
            "requireReturnType": true,
            "requireReturnDescription": false,
            "requireParamDescription": false,
            "prefer": {
                "return": "returns",
                "arg": "param",
                "argument": "param",
                "virtual": "abstract"
            },
            "preferType": {
                "Boolean": "boolean",
                "Number": "number",
                "String": "string",
                "object": "Object",
                "function": "Function",
                "array": "Array",
                "regexp": "RegExp",
                "date": "Date",
                "element": "Element",
                "node": "Node"
            }
        }],

        // Enforce comparing typeof expressions against valid strings
        "valid-typeof": ["error", {
            "requireStringLiterals": true
        }],

        /******************************************************************************************************************/
        /** BEST PRACTICES ************************************************************************************************/
        /******************************************************************************************************************/

        // Enforces getter/setter pairs in objects
        "accessor-pairs": "off",

        // Enforces return statements in callbacks of array's methods
        "array-callback-return": "error",

        // Treat var as Block Scoped
        "block-scoped-var": "error",

        // Enforce that class methods use `this`
        "class-methods-use-this": "off",

        // Limit cyclomatic complexity
        "complexity": "off",

        // Require return statements to either always or never specify values
        "consistent-return": ["error", {
            "treatUndefinedAsUnspecified": true
        }],

        // Require following curly brace conventions
        "curly": "error",

        // Require default case in switch statements
        "default-case": ["error", { "commentPattern": "^no default$" }],

        // Enforce newline before and after dot
        "dot-location": ["error", "property"],

        // Require dot notation
        "dot-notation": "error",

        // Require === and !==
        "eqeqeq": "error",

        // Require guarding for-in
        "guard-for-in": "error",

        // Disallow use of alert
        "no-alert": "warn",

        // Disallow use of caller/callee
        "no-caller": "error",

        // Disallow lexical declarations in case/default clauses
        "no-case-declarations": "error",

        // Disallow regexs that look like division
        "no-div-regex": "off",

        // Disallow return before else
        "no-else-return": "error",

        // Disallow empty functions
        "no-empty-function": ["error", {
            "allow": [
                "functions",
                "arrowFunctions",
                "methods"
            ]
        }],

        // Disallow empty destructuring patterns
        "no-empty-pattern": "error",

        // Disallow null comparisons
        "no-eq-null": "error",

        // Disallow eval()
        "no-eval": "error",

        // Disallow extending of native objects
        "no-extend-native": "error",

        // Disallow unnecessary function binding
        "no-extra-bind": "error",

        // Disallow unnecessary labels
        "no-extra-label": "error",

        // Disallow fallthrough of case statements
        "no-fallthrough": "error",

        // Disallow floating decimals
        "no-floating-decimal": "error",

        // Disallow assignments to native objects or read-only global variables
        "no-global-assign": "error",

        // Disallow implicit type conversions with shorter notations
        "no-implicit-coercion": "off",

        // Disallow variable and function declarations in the global scope
        "no-implicit-globals": "error",

        // Disallow implied eval()
        "no-implied-eval": "error",

        // Disallow this keywords outside of classes or class-like objects
        "no-invalid-this": "error",

        // Disallow iterator
        "no-iterator": "error",

        // Disallow use of labels for anything other then loops and switches
        "no-labels": "error",

        // Disallow unnecessary nested blocks
        "no-lone-blocks": "error",

        // Disallow functions in loops
        "no-loop-func": "error",

        // Disallow magic numbers
        "no-magic-numbers": "off",

        // Disallow muliple spaces
        "no-multi-spaces": "error",

        // Disallow multiline strings
        "no-multi-str": "error",

        // Disallow function constructor
        "no-new-func": "error",

        // Disallows primitive wrapper instances
        "no-new-wrappers": "error",

        // Disallow new for side effects
        "no-new": "off",

        // Disallow octal escape sequences in string literals
        "no-octal-escape": "error",

        // Disallow octal literals
        "no-octal": "error",

        // Disallow reassignment of function parameters
        // Disallow parameter object manipulation
//        "no-param-reassign": ["error", { "props": true }],

        // Disallow usage of __proto__ property
        "no-proto": "error",

        // Disallow variable redeclaration
        "no-redeclare": "error",

        // Disallow certain object properties
        "no-restricted-properties": ["error",
            {
                "object": "arguments",
                "property": "callee",
                "message": "arguments.callee is deprecated"
            }, {
                "property": "__defineGetter__",
                "message": "Please use Object.defineProperty instead."
            }, {
                "property": "__defineSetter__",
                "message": "Please use Object.defineProperty instead."
            }, {
                "object": "Math",
                "property": "pow",
                "message": "Use the exponentiation operator (**) instead."
            }
        ],

        // Disallow assignment in return statement
        "no-return-assign": "off",

        // Disallow unnecessary redundant `return await`
        "no-return-await": "error",

        // Disallow use of `javascript:` urls.
        "no-script-url": "error",

        // Disallow self assignment
        "no-self-assign": "error",

        // Disallow self compare
        "no-self-compare": "error",

        // Disallow use of comma operator
        "no-sequences": "error",

        // Restrict what can be thrown as an exception
        "no-throw-literal": "error",

        // Disallow unmodified conditions of loops
        "no-unmodified-loop-condition": "off",

        // Disallow usage of expressions in statement position
        "no-unused-expressions": "error",

        // Disallow unused labels
        "no-unused-labels": "error",

        // Disallow unnecessary .call() and .apply()
        "no-useless-call": "error",

        // Disallow unnecessary concatenation of strings
        "no-useless-concat": "error",

        // Disallow unnecessary escape usage
        "no-useless-escape": "error",

        // Disallow redundant return statements
        "no-useless-return": "error",

        // Disallow use of void operator
        "no-void": "error",

        // Disallow warning comments
        "no-warning-comments": "off",

        // Disallow with statements
        "no-with": "error",

        // Require using Error objects as Promise rejection reasons
//        "prefer-promise-reject-error": "error",

        // Require radix parameter
        "radix": "error",

        // Disallow async functions which have no await expression
        "require-await": "off",

        // Require variable declarations to be at the top of their scope
        "vars-on-top": "error",

        // Require IIFEs to be wrapped
        "wrap-iife": "error",

        // Require or disallow Yoda conditions
        "yoda": "error",

        /******************************************************************************************************************/
        /** STRICT ********************************************************************************************************/
        /******************************************************************************************************************/

        // Rabel or disallow strict mode directoves
        "strict": "error",

        /******************************************************************************************************************/
        /** VARIABLES *****************************************************************************************************/
        /******************************************************************************************************************/

        // Require or disallow initialization in variable declarations
        "init-declarations": "off",

        // Disallow shadowing of variables inside of catch
        "no-catch-shadow": "off",

        // Disallow deleting variables
        "no-delete-var": "error",

        // Disallow labels that are variables names
        "no-label-var": "error",

        // Disallow specific global variables
        "no-restricted-globals": "off",

        // Disallow shadowing of restricted names
        "no-shadow-restricted-names": "error",

        // Disallow variable declarations from shadowing variables declared in the outer scope
        "no-shadow": "error",

        // Disallow initializing to undefined
        "no-undef-init": "error",

        // Disallow undeclared variables
        "no-undef": "error",

        // Disallow use of undefined variable
        "no-undefined": "off",

        // Disallow unused variables
        "no-unused-vars": "error",

        // Disallow early use
        "no-use-before-define": "error",

        /******************************************************************************************************************/
        /** NODE.JS && COMMONJS *******************************************************************************************/
        /******************************************************************************************************************/

        // Enforce return after callback
        "callback-return": "off",

        // Enforce require() on the top-level module scope
        "global-require": "error",

        // Enforce callback error handling
        "handle-callback-err": ["error", "^.*(e|E)rr"],

        // Disallow require calls to be mixed with regular variable declarations
        "no-mixed-requires": "off",

        // Disallow new require
        "no-new-require": "error",

        // Disallow string concatenation when using __dirname and __filename
        "no-path-concat": "error",

        // Disallow process.env
        "no-process-env": "off",

        // Disallow process.exit()
        "no-process-exit": "off",

        // Disallow Node.js modules
        "no-restricted-modules": "off",

        // Disallow synchronous methods
        "no-sync": "off",

        /******************************************************************************************************************/
        /** STYLE *********************************************************************************************************/
        /******************************************************************************************************************/

        // Disallow or enforce inside of brackets
        "array-bracket-spacing": ["error", "never"],

        // Disallow or enforce spaces inside of single line blocks
        "block-spacing": ["error", "always"],

        // Require brace style
        "brace-style": ["error", "1tbs", {
            "allowSingleLine": true
        }],

        // Require camelcase
        "camelcase": "error",

        // Enforce or disallow capitalization of the first letter of a comment
        "capitalized-comments": ["off", "never"],

        // Require or disallow trailing commas
        "comma-dangle": "error",

        // Enforce spacing around commas
        "comma-spacing": ["error", {
            "before": false,
            "after": true
        }],

        // Comma style
        "comma-style": ["error", "last"],

        // Disallow or enforce spaces inside of computed properties
        "computed-property-spacing": ["error", "never"],

        // Require consistent this
        "consistent-this": "off",

        // Require or disallow newline at the end of files
        "eol-last": ["error", "always"],

        // Require or disallow spacing between function identifiers and their invocations
        "func-call-spacing": ["error", "never"],

        // Require function names to match the name of the variable or property to which they are assigned
        "func-name-matching": "off",

        // Require or disallow names function expressions
        "func-names": "warn",

        // Enforces the cocnsistent use of either function declarations or expressions
        "func-style": ["warn", "expression"],

        // Disallow specified identifiers
        "id-blacklist": "off",

        // Enforce minimum and maximum identifier lengths
        "id-length": "off",

        // Require identifiers to match a specified regular expression
        "id-match": "off",

        // Enforce consistent indentation
        "indent": ["error", 4],

        // Enforce the consistent use of either double or single quotes in JSX attributes
        "jsx-quotes": "off",

        // Enforces consistent spacing between keys and values in object literal properties
        "key-spacing": ["error", {
            "beforeColon": false,
            "afterColon": true
        }],

        // Enforce consistent spacing before and after keywords
        "keyword-spacing": ["error", {
            "before": true,
            "after": true,
            "overrides": {
                "return": { "after": true },
                "throw": { "after": true },
                "case": { "after": true }
            }
        }],

        // Enforce position of line comments
        "line-comment-position": ["warn", {
            "position": "above",
            "applyDefaultPatterns": true
        }],

        // Enforce consistent linebreak style
        "linebreak-style": ["error", "unix"],

        // Require empty lines around comments
        "lines-around-comment": "off",

        // Require or disallow newlines around directives
        "lines-around-directive": "error",

        // Enforce a maximum depth that blocks can be nested
        "max-depth": ["off", 4],

        // Enforce a maximum line
        "max-len": ["error", 120, 4, {
            "ignoreUrls": true,
            "ignoreComments": true,
            "ignoreRegExpLiterals": true,
            "ignoreStrings": true,
            "ignoreTemplateLiterals": true
        }],

        // Enforce a maximum file length
        "max-lines": ["off", {
            "max": 300,
            "skipBlankLines": true,
            "skipComments": true
        }],

        // Enforce a maximum depth that callbacks can be nested
        "max-nested-callbacks": "off",

        // Enforce a maximum number of parameters in function definitions
        "max-params": ["off", 3],

        // Enforce a maximum number of statements allowed per line
        "max-statements-per-line": ["off", {
            "max": 1
        }],

        // Enforce a maximum number of statements allowed in a function
        "max-statements": ["off", 10],

        // Require multiline ternary
        "multiline-ternary": ["off", "never"],

        // Require constructor names to begin with a capital letter
        "new-cap": ["error", {
            "capIsNew": false
        }],

        // Require parentheses when invoking a constructor with no arguments
        "new-parens": "error",

        // Require or disallow an empty newline after variable desclarations
        "newline-after-var": "off",

        // Require an empty line before return statements
        "newline-before-return": "off",

        // Require a newline after each call in a method chain
        "newline-per-chained-call": ["error", {
            "ignoreChainWithDepth": 4
        }],

        // Disallow Array constructor
        "no-array-constructor": "error",

        // Disallow use of bitwise operators
        "no-bitwise": "off",

        // Disallow continue statements
        "no-continue": "error",

        // Disallow inline comments after code
        "no-inline-comments": "off",

        // Disallow if statements as the only statements in else blocks
        "no-lonely-if": "error",

        // Disallow mixes of different operators
//        "no-mixed-operators": ["error", {
//            "allowSamePrecedence": false
//        }],

        // Disallow mixed spaces and tabs for indentation
        "no-mixed-spaces-and-tabs": "error",

        // Disallow use of chained assignments expressions
        "no-multi-assign": "error",

        // Disallow multiple empty lines
        "no-multiple-empty-lines": ["error", {
            "max": 2,
            "maxEOF": 1
        }],

        // Disallow negated conditions
        "no-negated-condition": "off",

        // Disallow nested ternary expressions
        "no-nested-ternary": "error",

        // Disallow Object constructors
        "no-new-object": "error",

        // Disallow the unary operators ++ and --;
        "no-plusplus": "error",

        // Disallow specified syntax
        "no-restricted-syntax": [
            "error",
            "ForInStatement",
            "ForOfStatement",
            "LabeledStatement",
            "WithStatement"
        ],

        // Disallow all tabs
        "no-tabs": "error",

        // Disallow ternary operators
        "no-ternary": "off",

        // Disallow trailing whitespace at the end of lines
        "no-trailing-spaces": "error",

        // disallow dangling underscores in identifiers
//        "no-underscore-dangle": ["error", {
//            "allowAfterThis": true,
//            "allowAfterSuper": true
//        }],

        // Disallow ternary operators when simpler alternatives exist
        "no-unneeded-ternary": ["error", {
            "defaultAssignment": false
        }],

        // Disallow whitespace before properties
        "no-whitespace-before-property": "error",

        // Enforce consistent line breaks inside braces
        "object-curly-newline": ["off", {
            "ObjectExpression": {
                "minProperties": 0,
                "multiline": true
            },
            "ObjectPattern": {
                "minProperties": 0,
                "multiline": true
            }
        }],

        // Enforce consistent spacing inside braces
        "object-curly-spacing": ["error", "always"],

        // Enforce placing object properties on separate line
        "object-property-newline": ["error", {
            "allowMultiplePropertiesPerLine": true
        }],

        // Require or disallow newlines around variable declaration
        "one-var-declaration-per-line": ["error", "always"],

        // Enforce variables to be declared either together or separately in functions
        "one-var": ["error", "never"],

        // Require or disallow assignment operator shorthand where possible
        "operator-assignment": ["error", "always"],

        // Enforce consistent linebreak style for operators
        "operator-linebreak": "off",

        // Require or disallow padding within blocks
        "padded-blocks": ["error", "never"],

        // Require quotes around object literal property names
        "quote-props": ["error", "as-needed", {
            "keywords": false,
            "unnecessary": true,
            "numbers": false
        }],

        // Enforce the consistent use of either backticks, double or single quotes
        "quotes": ["error", "single", {
            "avoidEscape": true
        }],

        // Require JSDoc comments
        "require-jsdoc": ["error", {
            "require": {
                "FunctionDeclaration": true,
                "MethodDefinition": true,
                "ClassDeclaration": true,
                "ArrowFunctionExpression": true
            }
        }],

        // Enforce spacing before and after semicolons
        "semi-spacing": ["error", {
            "before": false,
            "after": true
        }],

        // Require or disallow semicolons instead of ASI
        "semi": ["error", "always"],

        // Requires object keys to be sorted
        "sort-keys": ["off", "asc", {
            "caseSensitive": false,
            "natural": true
        }],

        // Variable sorting
        "sort-vars": "off",

        // Require or disallow space before blocks
        "space-before-blocks": "error",

        // Require or disallow a space before function parenthesis
        "space-before-function-paren": ["error", {
            "anonymous": "always",
            "named": "never",
            "asyncArrow": "always"
        }],

        // Require or enforce spaces inside parentheses
        "space-in-parens": ["error", "never"],

        // Require spacing around infix operators
        "space-infix-ops": "error",

        // Require or disallow spaces before/after unary operators
        "space-unary-ops": ["error", {
            "words": true,
            "nonwords": false,
            "overrides": {}
        }],

        // Requires or disallow a whitespace beginning a comment
        "spaced-comment": ["error", "always", {
            "line": {
                "exceptions": ["-", "+", "*"],
                "markers": ["=", "!"] // space here to support sprockets directives
            },
            "block": {
                "exceptions": ["-", "+", "*"],
                "markers": ["=", "!"], // space here to support sprockets directives
                "balanced": false
            }
        }],

        // Require or disallow spacing between template tags and their literals
        "template-tag-spacing": ["error", "never"],

        // Require or disallow the Unicode Byte Order Mark
        "unicode-bom": ["error", "never"],

        // Require regex literals to be wrapped
        "wrap-regex": "off",

        /******************************************************************************************************************/
        /** ES6  **********************************************************************************************************/
        /******************************************************************************************************************/

        // Require braces in arrow function body
        "arrow-body-style": ["error", "as-needed", {
            "requireReturnForObjectLiteral": true
        }],

        // Require parens in arrow function arguments
        "arrow-parens": ["error", "as-needed"],

        // Require space before/after arrow function's arrow
        "arrow-spacing": ["error", {
            "before": true,
            "after": true
        }],

        // Verify calls of super() in constructors
        "constructor-super": "error",

        // Enforce spacing around the * in generator functions
        "generator-star-spacing": ["error", {
            "before": false,
            "after": true
        }],

        // Disallow modifying variables of class declarations
        "no-class-assign": "error",

        // Disallow arrow functions where they could be confused with comparisons
        "no-confusing-arrow": ["error", {
            "allowParens": true
        }],

        // Disallow modifying variables that are declared using const
        "no-const-assign": "error",

        // Disallow duplicate class members
        "no-dupe-class-members": "error",

        // Disallow duplicate imports
        // http://eslint.org/docs/rules/no-duplicate-imports
        "no-duplicate-imports": "error",

        // Disallow symbol constructor
        "no-new-symbol": "error",

        // Disallow specific imports
        "no-restricted-imports": "off",

        // Disallow use this/super before super() in constructors
        "no-this-before-super": "error",

        // Disallow unnecessary computed property keys on objects
        "no-useless-computed-key": "error",

        // Disallow unnecessary constructor
        "no-useless-constructor": "error",

        // Disallow renaming import, export, and destructured assignments to the same name
        "no-useless-rename": ["error", {
            "ignoreDestructuring": false,
            "ignoreImport": false,
            "ignoreExport": false
        }],

        // Require let or const instead of var
        "no-var": "error",

        // Require object literal shorthand syntax
        "object-shorthand": ["error", "always", {
            "ignoreConstructors": false,
            "avoidQuotes": true
        }],

        // Suggest using arrow functions as callbacks
        "prefer-arrow-callback": ["error", {
            "allowNamedFunctions": false,
            "allowUnboundThis": true
        }],

        // Suggest using of const
        "prefer-const": ["error", {
            "destructuring": "any",
            "ignoreReadBeforeAssign": true
        }],

        // Prefer destructuring from arrays and objects
        "prefer-destructuring": ["off", {
            "array": true,
            "object": true
        }, {
            "enforceForRenamedProperties": false
        }],

        // Disallow parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-numeric-literals": "error",

        // Suggest using the rest parameters instead of arguments
        "prefer-rest-params": "error",

        // Suggest using the spread operator instead of .apply()
        "prefer-spread": "error",

        // Suggest using template literals instead of string concatenation
        "prefer-template": "error",

        // Disallow generator functions that do not have yield
        "require-yield": "error",

        // Enforce spacing between rest and spread operators and their expressions
        "rest-spread-spacing": ["error", "never"],

        // Import sorting
        "sort-imports": ["off", {
            "ignoreCase": false,
            "ignoreMemberSort": false,
            "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
        }],

        // Require Symbol description
        "symbol-description": "error",

        // Enforce usage of spacing in template strings
        "template-curly-spacing": "error",

        // Enforce spacing around the * in yield* expressions
        "yield-star-spacing": ["error", "after"]
    }

}
